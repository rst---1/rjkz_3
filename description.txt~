Илинбаев Николай Геннадьевич

Входные данные:

С помощью NumberOfProblem задаётся номер решаемой задачи.
Модуль Юнга	E_z1, E_z2, E_z3. Задают характеристики для каждого из используемых в задаче материалов
Коэффициент Пуассона nui. Задаётся общим для всех материалов. В будущем ожидается задание разных коээфициентов Пуассона для каждого материала.
Переменная integral была нужна для подсчёта значения интеграла поверхности U_z.
Переменная N означает количество рефайнов. Каждый рефайн делит ячейку на 4 маленькие ячейки.

class Mu_zx - нужен для задания функции mu_zx. Хоть и в формулах используется постоянный коэффициент mu_zx, для него создан класс, чтобы можно было задавать mu_zx в виде функции.
class Mu_zy - нужен для задания функции mu_zy. Хоть и в формулах используется постоянный коэффициент mu_zy, для него создан класс, чтобы можно было задавать mu_zy в виде функции.
class Tau_zz - нужен для задания функции tau_zz. Хоть и в формулах используется постоянный коэффициент tau_zz, для него создан класс, чтобы можно было задавать tau_zz в виде функции.
class U_x - нужен для задания функции u_x. В будущем планируется производить вычисления этой функции в отдельной программе.
class U_y - нужен для задания функции u_y. В будущем планируется производить вычисления этой функции в отдельной программе.
class FunctionAnalisys - нужен для задания функции аналитического решения. При необходимости эта функция сравнивается с вычисленным решением U_z. FunctionAnalisys<dim>::value - содержит значение функции аналитического решения. FunctionAnalisys<dim>::mygradientX - содержит производную по x от функции аналитического решения. FunctionAnalisys<dim>::mygradientY - содержит производную по y от функции аналитического решения.

Может удалить class SolutionBase??????????????????????????????????
Может удалить class Solution??????????????????????????????????????

get_grad - функция, возвращающая производные в каждой вершине ячейки. Для расчёта необходимы координаты четырёх вершин ячейки и значения функции на них. Идея работы функции: для каждой вершины, например вершина №1, существуют три остальные вершины (№1, №2, №3), которые лежат на двух прямых (сторонах четырёхугольника). Для каждой из этих прямых известны их формулы вида y = k * x + a . Остаётся найти пересечение каждой такой прямой с абсциссой или ординатой вершины №1. Далее на этих новых точках (y_1 и x__1) находят значения функции по формулам вида f = k * x + a или f = k * y + a. Полученные значения (f_1 и f__1) используют для вычисления производной по обычным формулам grad(0) = ( f1 - f__1 ) / ( x1 - x__1 ) и grad(1) = ( f1 - f_1 ) / ( y1 - y_1 ). И так проходят каждую вершину, находя производную и по x и по y.

set_grid - функция для триангуляции области по Делане. В начале задают вершины основной области через метод vec_of_vertices.push_back(cdt.insert(CDTPoint(-0.5, -3.386363) )). Потом нужно создать малые области внутри этой основной области (далее малые области превратятся в отверстия или в арматуру из другого материала), для этого заполняют стек vec_of_domains коорднатами малой области (вершинами) с помощью метода vec_of_domains.push_back(vec_of_vertices). Далее центр каждой малой области помечается методом list_of_seeds.push_back(CDTPoint(0.0, -2.5)) - для отврстий, или list_of_inclusion.push_back(CDTPoint(-0.3636, -0.42045)) - для включений. CGAL::refine_Delaunay_mesh_2(cdt, list_of_seeds.begin(), list_of_seeds.end(), Criteria(0.3,0.2)) - используется для создания отверстия в большой области. CGAL создаёт триангуляционную сетку, чтобы получить из неё четырёхугольники используется большой цикл из 131 строки. Далее CGAL::refine_Delaunay_mesh_2(cdt, list_of_inclusion.begin(), list_of_inclusion.end(), Criteria(0.3,0.3), true) - нужно чтобы отметить малые области для арматуры и отдельно рефайнить их. И опять большой цикл из 131 строки.

Function1 - функция для 













